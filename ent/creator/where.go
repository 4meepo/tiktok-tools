// Code generated by ent, DO NOT EDIT.

package creator

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/4meepo/tiktok-tools/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// Xzid applies equality check predicate on the "xzid" field. It's identical to XzidEQ.
func Xzid(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldXzid), v))
	})
}

// UniqueID applies equality check predicate on the "unique_id" field. It's identical to UniqueIDEQ.
func UniqueID(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUniqueID), v))
	})
}

// NickName applies equality check predicate on the "nick_name" field. It's identical to NickNameEQ.
func NickName(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNickName), v))
	})
}

// Region applies equality check predicate on the "region" field. It's identical to RegionEQ.
func Region(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegion), v))
	})
}

// FollowerNum applies equality check predicate on the "follower_num" field. It's identical to FollowerNumEQ.
func FollowerNum(v uint32) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFollowerNum), v))
	})
}

// CreatorID applies equality check predicate on the "creator_id" field. It's identical to CreatorIDEQ.
func CreatorID(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatorID), v))
	})
}

// CreatorOecuid applies equality check predicate on the "creator_oecuid" field. It's identical to CreatorOecuidEQ.
func CreatorOecuid(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatorOecuid), v))
	})
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// Whatsapp applies equality check predicate on the "whatsapp" field. It's identical to WhatsappEQ.
func Whatsapp(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWhatsapp), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Creator {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Creator {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Creator {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Creator {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// XzidEQ applies the EQ predicate on the "xzid" field.
func XzidEQ(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldXzid), v))
	})
}

// XzidNEQ applies the NEQ predicate on the "xzid" field.
func XzidNEQ(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldXzid), v))
	})
}

// XzidIn applies the In predicate on the "xzid" field.
func XzidIn(vs ...string) predicate.Creator {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldXzid), v...))
	})
}

// XzidNotIn applies the NotIn predicate on the "xzid" field.
func XzidNotIn(vs ...string) predicate.Creator {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldXzid), v...))
	})
}

// XzidGT applies the GT predicate on the "xzid" field.
func XzidGT(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldXzid), v))
	})
}

// XzidGTE applies the GTE predicate on the "xzid" field.
func XzidGTE(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldXzid), v))
	})
}

// XzidLT applies the LT predicate on the "xzid" field.
func XzidLT(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldXzid), v))
	})
}

// XzidLTE applies the LTE predicate on the "xzid" field.
func XzidLTE(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldXzid), v))
	})
}

// XzidContains applies the Contains predicate on the "xzid" field.
func XzidContains(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldXzid), v))
	})
}

// XzidHasPrefix applies the HasPrefix predicate on the "xzid" field.
func XzidHasPrefix(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldXzid), v))
	})
}

// XzidHasSuffix applies the HasSuffix predicate on the "xzid" field.
func XzidHasSuffix(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldXzid), v))
	})
}

// XzidEqualFold applies the EqualFold predicate on the "xzid" field.
func XzidEqualFold(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldXzid), v))
	})
}

// XzidContainsFold applies the ContainsFold predicate on the "xzid" field.
func XzidContainsFold(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldXzid), v))
	})
}

// UniqueIDEQ applies the EQ predicate on the "unique_id" field.
func UniqueIDEQ(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUniqueID), v))
	})
}

// UniqueIDNEQ applies the NEQ predicate on the "unique_id" field.
func UniqueIDNEQ(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUniqueID), v))
	})
}

// UniqueIDIn applies the In predicate on the "unique_id" field.
func UniqueIDIn(vs ...string) predicate.Creator {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUniqueID), v...))
	})
}

// UniqueIDNotIn applies the NotIn predicate on the "unique_id" field.
func UniqueIDNotIn(vs ...string) predicate.Creator {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUniqueID), v...))
	})
}

// UniqueIDGT applies the GT predicate on the "unique_id" field.
func UniqueIDGT(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUniqueID), v))
	})
}

// UniqueIDGTE applies the GTE predicate on the "unique_id" field.
func UniqueIDGTE(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUniqueID), v))
	})
}

// UniqueIDLT applies the LT predicate on the "unique_id" field.
func UniqueIDLT(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUniqueID), v))
	})
}

// UniqueIDLTE applies the LTE predicate on the "unique_id" field.
func UniqueIDLTE(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUniqueID), v))
	})
}

// UniqueIDContains applies the Contains predicate on the "unique_id" field.
func UniqueIDContains(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUniqueID), v))
	})
}

// UniqueIDHasPrefix applies the HasPrefix predicate on the "unique_id" field.
func UniqueIDHasPrefix(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUniqueID), v))
	})
}

// UniqueIDHasSuffix applies the HasSuffix predicate on the "unique_id" field.
func UniqueIDHasSuffix(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUniqueID), v))
	})
}

// UniqueIDEqualFold applies the EqualFold predicate on the "unique_id" field.
func UniqueIDEqualFold(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUniqueID), v))
	})
}

// UniqueIDContainsFold applies the ContainsFold predicate on the "unique_id" field.
func UniqueIDContainsFold(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUniqueID), v))
	})
}

// NickNameEQ applies the EQ predicate on the "nick_name" field.
func NickNameEQ(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNickName), v))
	})
}

// NickNameNEQ applies the NEQ predicate on the "nick_name" field.
func NickNameNEQ(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNickName), v))
	})
}

// NickNameIn applies the In predicate on the "nick_name" field.
func NickNameIn(vs ...string) predicate.Creator {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNickName), v...))
	})
}

// NickNameNotIn applies the NotIn predicate on the "nick_name" field.
func NickNameNotIn(vs ...string) predicate.Creator {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNickName), v...))
	})
}

// NickNameGT applies the GT predicate on the "nick_name" field.
func NickNameGT(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNickName), v))
	})
}

// NickNameGTE applies the GTE predicate on the "nick_name" field.
func NickNameGTE(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNickName), v))
	})
}

// NickNameLT applies the LT predicate on the "nick_name" field.
func NickNameLT(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNickName), v))
	})
}

// NickNameLTE applies the LTE predicate on the "nick_name" field.
func NickNameLTE(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNickName), v))
	})
}

// NickNameContains applies the Contains predicate on the "nick_name" field.
func NickNameContains(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNickName), v))
	})
}

// NickNameHasPrefix applies the HasPrefix predicate on the "nick_name" field.
func NickNameHasPrefix(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNickName), v))
	})
}

// NickNameHasSuffix applies the HasSuffix predicate on the "nick_name" field.
func NickNameHasSuffix(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNickName), v))
	})
}

// NickNameEqualFold applies the EqualFold predicate on the "nick_name" field.
func NickNameEqualFold(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNickName), v))
	})
}

// NickNameContainsFold applies the ContainsFold predicate on the "nick_name" field.
func NickNameContainsFold(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNickName), v))
	})
}

// RegionEQ applies the EQ predicate on the "region" field.
func RegionEQ(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegion), v))
	})
}

// RegionNEQ applies the NEQ predicate on the "region" field.
func RegionNEQ(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRegion), v))
	})
}

// RegionIn applies the In predicate on the "region" field.
func RegionIn(vs ...string) predicate.Creator {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRegion), v...))
	})
}

// RegionNotIn applies the NotIn predicate on the "region" field.
func RegionNotIn(vs ...string) predicate.Creator {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRegion), v...))
	})
}

// RegionGT applies the GT predicate on the "region" field.
func RegionGT(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRegion), v))
	})
}

// RegionGTE applies the GTE predicate on the "region" field.
func RegionGTE(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRegion), v))
	})
}

// RegionLT applies the LT predicate on the "region" field.
func RegionLT(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRegion), v))
	})
}

// RegionLTE applies the LTE predicate on the "region" field.
func RegionLTE(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRegion), v))
	})
}

// RegionContains applies the Contains predicate on the "region" field.
func RegionContains(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRegion), v))
	})
}

// RegionHasPrefix applies the HasPrefix predicate on the "region" field.
func RegionHasPrefix(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRegion), v))
	})
}

// RegionHasSuffix applies the HasSuffix predicate on the "region" field.
func RegionHasSuffix(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRegion), v))
	})
}

// RegionEqualFold applies the EqualFold predicate on the "region" field.
func RegionEqualFold(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRegion), v))
	})
}

// RegionContainsFold applies the ContainsFold predicate on the "region" field.
func RegionContainsFold(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRegion), v))
	})
}

// FollowerNumEQ applies the EQ predicate on the "follower_num" field.
func FollowerNumEQ(v uint32) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFollowerNum), v))
	})
}

// FollowerNumNEQ applies the NEQ predicate on the "follower_num" field.
func FollowerNumNEQ(v uint32) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFollowerNum), v))
	})
}

// FollowerNumIn applies the In predicate on the "follower_num" field.
func FollowerNumIn(vs ...uint32) predicate.Creator {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFollowerNum), v...))
	})
}

// FollowerNumNotIn applies the NotIn predicate on the "follower_num" field.
func FollowerNumNotIn(vs ...uint32) predicate.Creator {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFollowerNum), v...))
	})
}

// FollowerNumGT applies the GT predicate on the "follower_num" field.
func FollowerNumGT(v uint32) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFollowerNum), v))
	})
}

// FollowerNumGTE applies the GTE predicate on the "follower_num" field.
func FollowerNumGTE(v uint32) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFollowerNum), v))
	})
}

// FollowerNumLT applies the LT predicate on the "follower_num" field.
func FollowerNumLT(v uint32) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFollowerNum), v))
	})
}

// FollowerNumLTE applies the LTE predicate on the "follower_num" field.
func FollowerNumLTE(v uint32) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFollowerNum), v))
	})
}

// CreatorIDEQ applies the EQ predicate on the "creator_id" field.
func CreatorIDEQ(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatorID), v))
	})
}

// CreatorIDNEQ applies the NEQ predicate on the "creator_id" field.
func CreatorIDNEQ(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatorID), v))
	})
}

// CreatorIDIn applies the In predicate on the "creator_id" field.
func CreatorIDIn(vs ...string) predicate.Creator {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatorID), v...))
	})
}

// CreatorIDNotIn applies the NotIn predicate on the "creator_id" field.
func CreatorIDNotIn(vs ...string) predicate.Creator {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatorID), v...))
	})
}

// CreatorIDGT applies the GT predicate on the "creator_id" field.
func CreatorIDGT(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatorID), v))
	})
}

// CreatorIDGTE applies the GTE predicate on the "creator_id" field.
func CreatorIDGTE(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatorID), v))
	})
}

// CreatorIDLT applies the LT predicate on the "creator_id" field.
func CreatorIDLT(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatorID), v))
	})
}

// CreatorIDLTE applies the LTE predicate on the "creator_id" field.
func CreatorIDLTE(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatorID), v))
	})
}

// CreatorIDContains applies the Contains predicate on the "creator_id" field.
func CreatorIDContains(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCreatorID), v))
	})
}

// CreatorIDHasPrefix applies the HasPrefix predicate on the "creator_id" field.
func CreatorIDHasPrefix(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCreatorID), v))
	})
}

// CreatorIDHasSuffix applies the HasSuffix predicate on the "creator_id" field.
func CreatorIDHasSuffix(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCreatorID), v))
	})
}

// CreatorIDEqualFold applies the EqualFold predicate on the "creator_id" field.
func CreatorIDEqualFold(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCreatorID), v))
	})
}

// CreatorIDContainsFold applies the ContainsFold predicate on the "creator_id" field.
func CreatorIDContainsFold(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCreatorID), v))
	})
}

// CreatorOecuidEQ applies the EQ predicate on the "creator_oecuid" field.
func CreatorOecuidEQ(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatorOecuid), v))
	})
}

// CreatorOecuidNEQ applies the NEQ predicate on the "creator_oecuid" field.
func CreatorOecuidNEQ(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatorOecuid), v))
	})
}

// CreatorOecuidIn applies the In predicate on the "creator_oecuid" field.
func CreatorOecuidIn(vs ...string) predicate.Creator {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatorOecuid), v...))
	})
}

// CreatorOecuidNotIn applies the NotIn predicate on the "creator_oecuid" field.
func CreatorOecuidNotIn(vs ...string) predicate.Creator {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatorOecuid), v...))
	})
}

// CreatorOecuidGT applies the GT predicate on the "creator_oecuid" field.
func CreatorOecuidGT(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatorOecuid), v))
	})
}

// CreatorOecuidGTE applies the GTE predicate on the "creator_oecuid" field.
func CreatorOecuidGTE(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatorOecuid), v))
	})
}

// CreatorOecuidLT applies the LT predicate on the "creator_oecuid" field.
func CreatorOecuidLT(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatorOecuid), v))
	})
}

// CreatorOecuidLTE applies the LTE predicate on the "creator_oecuid" field.
func CreatorOecuidLTE(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatorOecuid), v))
	})
}

// CreatorOecuidContains applies the Contains predicate on the "creator_oecuid" field.
func CreatorOecuidContains(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCreatorOecuid), v))
	})
}

// CreatorOecuidHasPrefix applies the HasPrefix predicate on the "creator_oecuid" field.
func CreatorOecuidHasPrefix(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCreatorOecuid), v))
	})
}

// CreatorOecuidHasSuffix applies the HasSuffix predicate on the "creator_oecuid" field.
func CreatorOecuidHasSuffix(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCreatorOecuid), v))
	})
}

// CreatorOecuidEqualFold applies the EqualFold predicate on the "creator_oecuid" field.
func CreatorOecuidEqualFold(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCreatorOecuid), v))
	})
}

// CreatorOecuidContainsFold applies the ContainsFold predicate on the "creator_oecuid" field.
func CreatorOecuidContainsFold(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCreatorOecuid), v))
	})
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEmail), v))
	})
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Creator {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEmail), v...))
	})
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Creator {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEmail), v...))
	})
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEmail), v))
	})
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEmail), v))
	})
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEmail), v))
	})
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEmail), v))
	})
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEmail), v))
	})
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEmail), v))
	})
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEmail), v))
	})
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEmail), v))
	})
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEmail), v))
	})
}

// WhatsappEQ applies the EQ predicate on the "whatsapp" field.
func WhatsappEQ(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWhatsapp), v))
	})
}

// WhatsappNEQ applies the NEQ predicate on the "whatsapp" field.
func WhatsappNEQ(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWhatsapp), v))
	})
}

// WhatsappIn applies the In predicate on the "whatsapp" field.
func WhatsappIn(vs ...string) predicate.Creator {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWhatsapp), v...))
	})
}

// WhatsappNotIn applies the NotIn predicate on the "whatsapp" field.
func WhatsappNotIn(vs ...string) predicate.Creator {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWhatsapp), v...))
	})
}

// WhatsappGT applies the GT predicate on the "whatsapp" field.
func WhatsappGT(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWhatsapp), v))
	})
}

// WhatsappGTE applies the GTE predicate on the "whatsapp" field.
func WhatsappGTE(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWhatsapp), v))
	})
}

// WhatsappLT applies the LT predicate on the "whatsapp" field.
func WhatsappLT(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWhatsapp), v))
	})
}

// WhatsappLTE applies the LTE predicate on the "whatsapp" field.
func WhatsappLTE(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWhatsapp), v))
	})
}

// WhatsappContains applies the Contains predicate on the "whatsapp" field.
func WhatsappContains(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWhatsapp), v))
	})
}

// WhatsappHasPrefix applies the HasPrefix predicate on the "whatsapp" field.
func WhatsappHasPrefix(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWhatsapp), v))
	})
}

// WhatsappHasSuffix applies the HasSuffix predicate on the "whatsapp" field.
func WhatsappHasSuffix(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWhatsapp), v))
	})
}

// WhatsappEqualFold applies the EqualFold predicate on the "whatsapp" field.
func WhatsappEqualFold(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWhatsapp), v))
	})
}

// WhatsappContainsFold applies the ContainsFold predicate on the "whatsapp" field.
func WhatsappContainsFold(v string) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWhatsapp), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Creator) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Creator) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Creator) predicate.Creator {
	return predicate.Creator(func(s *sql.Selector) {
		p(s.Not())
	})
}
