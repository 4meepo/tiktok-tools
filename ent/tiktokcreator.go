// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/4meepo/tiktok-tools/ent/tiktokcreator"
)

// TiktokCreator is the model entity for the TiktokCreator schema.
type TiktokCreator struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatorID holds the value of the "creator_id" field.
	CreatorID string `json:"creator_id,omitempty"`
	// CreatorName holds the value of the "creator_name" field.
	CreatorName string `json:"creator_name,omitempty"`
	// CreatorNickname holds the value of the "creator_nickname" field.
	CreatorNickname string `json:"creator_nickname,omitempty"`
	// Region holds the value of the "region" field.
	Region string `json:"region,omitempty"`
	// ProductCategories holds the value of the "product_categories" field.
	ProductCategories []string `json:"product_categories,omitempty"`
	// FollowerCount holds the value of the "follower_count" field.
	FollowerCount uint32 `json:"follower_count,omitempty"`
	// VideoAvgViewCnt holds the value of the "video_avg_view_cnt" field.
	VideoAvgViewCnt uint32 `json:"video_avg_view_cnt,omitempty"`
	// VideoPubCnt holds the value of the "video_pub_cnt" field.
	VideoPubCnt uint32 `json:"video_pub_cnt,omitempty"`
	// EcVideoAvgViewCnt holds the value of the "ec_video_avg_view_cnt" field.
	EcVideoAvgViewCnt uint32 `json:"ec_video_avg_view_cnt,omitempty"`
	// CreatorOecuid holds the value of the "creator_oecuid" field.
	CreatorOecuid string `json:"creator_oecuid,omitempty"`
	// CreatorTtuid holds the value of the "creator_ttuid" field.
	CreatorTtuid string `json:"creator_ttuid,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TiktokCreator) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tiktokcreator.FieldProductCategories:
			values[i] = new([]byte)
		case tiktokcreator.FieldID, tiktokcreator.FieldFollowerCount, tiktokcreator.FieldVideoAvgViewCnt, tiktokcreator.FieldVideoPubCnt, tiktokcreator.FieldEcVideoAvgViewCnt:
			values[i] = new(sql.NullInt64)
		case tiktokcreator.FieldCreatorID, tiktokcreator.FieldCreatorName, tiktokcreator.FieldCreatorNickname, tiktokcreator.FieldRegion, tiktokcreator.FieldCreatorOecuid, tiktokcreator.FieldCreatorTtuid:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TiktokCreator", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TiktokCreator fields.
func (tc *TiktokCreator) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tiktokcreator.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tc.ID = int(value.Int64)
		case tiktokcreator.FieldCreatorID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator_id", values[i])
			} else if value.Valid {
				tc.CreatorID = value.String
			}
		case tiktokcreator.FieldCreatorName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator_name", values[i])
			} else if value.Valid {
				tc.CreatorName = value.String
			}
		case tiktokcreator.FieldCreatorNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator_nickname", values[i])
			} else if value.Valid {
				tc.CreatorNickname = value.String
			}
		case tiktokcreator.FieldRegion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field region", values[i])
			} else if value.Valid {
				tc.Region = value.String
			}
		case tiktokcreator.FieldProductCategories:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field product_categories", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &tc.ProductCategories); err != nil {
					return fmt.Errorf("unmarshal field product_categories: %w", err)
				}
			}
		case tiktokcreator.FieldFollowerCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field follower_count", values[i])
			} else if value.Valid {
				tc.FollowerCount = uint32(value.Int64)
			}
		case tiktokcreator.FieldVideoAvgViewCnt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field video_avg_view_cnt", values[i])
			} else if value.Valid {
				tc.VideoAvgViewCnt = uint32(value.Int64)
			}
		case tiktokcreator.FieldVideoPubCnt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field video_pub_cnt", values[i])
			} else if value.Valid {
				tc.VideoPubCnt = uint32(value.Int64)
			}
		case tiktokcreator.FieldEcVideoAvgViewCnt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ec_video_avg_view_cnt", values[i])
			} else if value.Valid {
				tc.EcVideoAvgViewCnt = uint32(value.Int64)
			}
		case tiktokcreator.FieldCreatorOecuid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator_oecuid", values[i])
			} else if value.Valid {
				tc.CreatorOecuid = value.String
			}
		case tiktokcreator.FieldCreatorTtuid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator_ttuid", values[i])
			} else if value.Valid {
				tc.CreatorTtuid = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this TiktokCreator.
// Note that you need to call TiktokCreator.Unwrap() before calling this method if this TiktokCreator
// was returned from a transaction, and the transaction was committed or rolled back.
func (tc *TiktokCreator) Update() *TiktokCreatorUpdateOne {
	return (&TiktokCreatorClient{config: tc.config}).UpdateOne(tc)
}

// Unwrap unwraps the TiktokCreator entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tc *TiktokCreator) Unwrap() *TiktokCreator {
	_tx, ok := tc.config.driver.(*txDriver)
	if !ok {
		panic("ent: TiktokCreator is not a transactional entity")
	}
	tc.config.driver = _tx.drv
	return tc
}

// String implements the fmt.Stringer.
func (tc *TiktokCreator) String() string {
	var builder strings.Builder
	builder.WriteString("TiktokCreator(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tc.ID))
	builder.WriteString("creator_id=")
	builder.WriteString(tc.CreatorID)
	builder.WriteString(", ")
	builder.WriteString("creator_name=")
	builder.WriteString(tc.CreatorName)
	builder.WriteString(", ")
	builder.WriteString("creator_nickname=")
	builder.WriteString(tc.CreatorNickname)
	builder.WriteString(", ")
	builder.WriteString("region=")
	builder.WriteString(tc.Region)
	builder.WriteString(", ")
	builder.WriteString("product_categories=")
	builder.WriteString(fmt.Sprintf("%v", tc.ProductCategories))
	builder.WriteString(", ")
	builder.WriteString("follower_count=")
	builder.WriteString(fmt.Sprintf("%v", tc.FollowerCount))
	builder.WriteString(", ")
	builder.WriteString("video_avg_view_cnt=")
	builder.WriteString(fmt.Sprintf("%v", tc.VideoAvgViewCnt))
	builder.WriteString(", ")
	builder.WriteString("video_pub_cnt=")
	builder.WriteString(fmt.Sprintf("%v", tc.VideoPubCnt))
	builder.WriteString(", ")
	builder.WriteString("ec_video_avg_view_cnt=")
	builder.WriteString(fmt.Sprintf("%v", tc.EcVideoAvgViewCnt))
	builder.WriteString(", ")
	builder.WriteString("creator_oecuid=")
	builder.WriteString(tc.CreatorOecuid)
	builder.WriteString(", ")
	builder.WriteString("creator_ttuid=")
	builder.WriteString(tc.CreatorTtuid)
	builder.WriteByte(')')
	return builder.String()
}

// TiktokCreators is a parsable slice of TiktokCreator.
type TiktokCreators []*TiktokCreator

func (tc TiktokCreators) config(cfg config) {
	for _i := range tc {
		tc[_i].config = cfg
	}
}
