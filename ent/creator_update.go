// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/4meepo/tiktok-tools/ent/creator"
	"github.com/4meepo/tiktok-tools/ent/predicate"
)

// CreatorUpdate is the builder for updating Creator entities.
type CreatorUpdate struct {
	config
	hooks    []Hook
	mutation *CreatorMutation
}

// Where appends a list predicates to the CreatorUpdate builder.
func (cu *CreatorUpdate) Where(ps ...predicate.Creator) *CreatorUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdateTime sets the "update_time" field.
func (cu *CreatorUpdate) SetUpdateTime(t time.Time) *CreatorUpdate {
	cu.mutation.SetUpdateTime(t)
	return cu
}

// SetXzid sets the "xzid" field.
func (cu *CreatorUpdate) SetXzid(s string) *CreatorUpdate {
	cu.mutation.SetXzid(s)
	return cu
}

// SetUniqueID sets the "unique_id" field.
func (cu *CreatorUpdate) SetUniqueID(s string) *CreatorUpdate {
	cu.mutation.SetUniqueID(s)
	return cu
}

// SetNickName sets the "nick_name" field.
func (cu *CreatorUpdate) SetNickName(s string) *CreatorUpdate {
	cu.mutation.SetNickName(s)
	return cu
}

// SetRegion sets the "region" field.
func (cu *CreatorUpdate) SetRegion(s string) *CreatorUpdate {
	cu.mutation.SetRegion(s)
	return cu
}

// SetFollowerNum sets the "follower_num" field.
func (cu *CreatorUpdate) SetFollowerNum(u uint32) *CreatorUpdate {
	cu.mutation.ResetFollowerNum()
	cu.mutation.SetFollowerNum(u)
	return cu
}

// AddFollowerNum adds u to the "follower_num" field.
func (cu *CreatorUpdate) AddFollowerNum(u int32) *CreatorUpdate {
	cu.mutation.AddFollowerNum(u)
	return cu
}

// SetCreatorID sets the "creator_id" field.
func (cu *CreatorUpdate) SetCreatorID(s string) *CreatorUpdate {
	cu.mutation.SetCreatorID(s)
	return cu
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (cu *CreatorUpdate) SetNillableCreatorID(s *string) *CreatorUpdate {
	if s != nil {
		cu.SetCreatorID(*s)
	}
	return cu
}

// SetCreatorOecuid sets the "creator_oecuid" field.
func (cu *CreatorUpdate) SetCreatorOecuid(s string) *CreatorUpdate {
	cu.mutation.SetCreatorOecuid(s)
	return cu
}

// SetNillableCreatorOecuid sets the "creator_oecuid" field if the given value is not nil.
func (cu *CreatorUpdate) SetNillableCreatorOecuid(s *string) *CreatorUpdate {
	if s != nil {
		cu.SetCreatorOecuid(*s)
	}
	return cu
}

// SetCate1NameCn sets the "cate1_name_cn" field.
func (cu *CreatorUpdate) SetCate1NameCn(s []string) *CreatorUpdate {
	cu.mutation.SetCate1NameCn(s)
	return cu
}

// AppendCate1NameCn appends s to the "cate1_name_cn" field.
func (cu *CreatorUpdate) AppendCate1NameCn(s []string) *CreatorUpdate {
	cu.mutation.AppendCate1NameCn(s)
	return cu
}

// SetTiktokCategory sets the "tiktok_category" field.
func (cu *CreatorUpdate) SetTiktokCategory(s []string) *CreatorUpdate {
	cu.mutation.SetTiktokCategory(s)
	return cu
}

// AppendTiktokCategory appends s to the "tiktok_category" field.
func (cu *CreatorUpdate) AppendTiktokCategory(s []string) *CreatorUpdate {
	cu.mutation.AppendTiktokCategory(s)
	return cu
}

// SetEmail sets the "email" field.
func (cu *CreatorUpdate) SetEmail(s string) *CreatorUpdate {
	cu.mutation.SetEmail(s)
	return cu
}

// SetWhatsapp sets the "whatsapp" field.
func (cu *CreatorUpdate) SetWhatsapp(s string) *CreatorUpdate {
	cu.mutation.SetWhatsapp(s)
	return cu
}

// Mutation returns the CreatorMutation object of the builder.
func (cu *CreatorUpdate) Mutation() *CreatorMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CreatorUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cu.defaults()
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CreatorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CreatorUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CreatorUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CreatorUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CreatorUpdate) defaults() {
	if _, ok := cu.mutation.UpdateTime(); !ok {
		v := creator.UpdateDefaultUpdateTime()
		cu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CreatorUpdate) check() error {
	if v, ok := cu.mutation.Xzid(); ok {
		if err := creator.XzidValidator(v); err != nil {
			return &ValidationError{Name: "xzid", err: fmt.Errorf(`ent: validator failed for field "Creator.xzid": %w`, err)}
		}
	}
	if v, ok := cu.mutation.UniqueID(); ok {
		if err := creator.UniqueIDValidator(v); err != nil {
			return &ValidationError{Name: "unique_id", err: fmt.Errorf(`ent: validator failed for field "Creator.unique_id": %w`, err)}
		}
	}
	if v, ok := cu.mutation.NickName(); ok {
		if err := creator.NickNameValidator(v); err != nil {
			return &ValidationError{Name: "nick_name", err: fmt.Errorf(`ent: validator failed for field "Creator.nick_name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Region(); ok {
		if err := creator.RegionValidator(v); err != nil {
			return &ValidationError{Name: "region", err: fmt.Errorf(`ent: validator failed for field "Creator.region": %w`, err)}
		}
	}
	if v, ok := cu.mutation.CreatorID(); ok {
		if err := creator.CreatorIDValidator(v); err != nil {
			return &ValidationError{Name: "creator_id", err: fmt.Errorf(`ent: validator failed for field "Creator.creator_id": %w`, err)}
		}
	}
	if v, ok := cu.mutation.CreatorOecuid(); ok {
		if err := creator.CreatorOecuidValidator(v); err != nil {
			return &ValidationError{Name: "creator_oecuid", err: fmt.Errorf(`ent: validator failed for field "Creator.creator_oecuid": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Email(); ok {
		if err := creator.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Creator.email": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Whatsapp(); ok {
		if err := creator.WhatsappValidator(v); err != nil {
			return &ValidationError{Name: "whatsapp", err: fmt.Errorf(`ent: validator failed for field "Creator.whatsapp": %w`, err)}
		}
	}
	return nil
}

func (cu *CreatorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   creator.Table,
			Columns: creator.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: creator.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdateTime(); ok {
		_spec.SetField(creator.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Xzid(); ok {
		_spec.SetField(creator.FieldXzid, field.TypeString, value)
	}
	if value, ok := cu.mutation.UniqueID(); ok {
		_spec.SetField(creator.FieldUniqueID, field.TypeString, value)
	}
	if value, ok := cu.mutation.NickName(); ok {
		_spec.SetField(creator.FieldNickName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Region(); ok {
		_spec.SetField(creator.FieldRegion, field.TypeString, value)
	}
	if value, ok := cu.mutation.FollowerNum(); ok {
		_spec.SetField(creator.FieldFollowerNum, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.AddedFollowerNum(); ok {
		_spec.AddField(creator.FieldFollowerNum, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.CreatorID(); ok {
		_spec.SetField(creator.FieldCreatorID, field.TypeString, value)
	}
	if value, ok := cu.mutation.CreatorOecuid(); ok {
		_spec.SetField(creator.FieldCreatorOecuid, field.TypeString, value)
	}
	if value, ok := cu.mutation.Cate1NameCn(); ok {
		_spec.SetField(creator.FieldCate1NameCn, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedCate1NameCn(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, creator.FieldCate1NameCn, value)
		})
	}
	if value, ok := cu.mutation.TiktokCategory(); ok {
		_spec.SetField(creator.FieldTiktokCategory, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedTiktokCategory(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, creator.FieldTiktokCategory, value)
		})
	}
	if value, ok := cu.mutation.Email(); ok {
		_spec.SetField(creator.FieldEmail, field.TypeString, value)
	}
	if value, ok := cu.mutation.Whatsapp(); ok {
		_spec.SetField(creator.FieldWhatsapp, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{creator.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CreatorUpdateOne is the builder for updating a single Creator entity.
type CreatorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CreatorMutation
}

// SetUpdateTime sets the "update_time" field.
func (cuo *CreatorUpdateOne) SetUpdateTime(t time.Time) *CreatorUpdateOne {
	cuo.mutation.SetUpdateTime(t)
	return cuo
}

// SetXzid sets the "xzid" field.
func (cuo *CreatorUpdateOne) SetXzid(s string) *CreatorUpdateOne {
	cuo.mutation.SetXzid(s)
	return cuo
}

// SetUniqueID sets the "unique_id" field.
func (cuo *CreatorUpdateOne) SetUniqueID(s string) *CreatorUpdateOne {
	cuo.mutation.SetUniqueID(s)
	return cuo
}

// SetNickName sets the "nick_name" field.
func (cuo *CreatorUpdateOne) SetNickName(s string) *CreatorUpdateOne {
	cuo.mutation.SetNickName(s)
	return cuo
}

// SetRegion sets the "region" field.
func (cuo *CreatorUpdateOne) SetRegion(s string) *CreatorUpdateOne {
	cuo.mutation.SetRegion(s)
	return cuo
}

// SetFollowerNum sets the "follower_num" field.
func (cuo *CreatorUpdateOne) SetFollowerNum(u uint32) *CreatorUpdateOne {
	cuo.mutation.ResetFollowerNum()
	cuo.mutation.SetFollowerNum(u)
	return cuo
}

// AddFollowerNum adds u to the "follower_num" field.
func (cuo *CreatorUpdateOne) AddFollowerNum(u int32) *CreatorUpdateOne {
	cuo.mutation.AddFollowerNum(u)
	return cuo
}

// SetCreatorID sets the "creator_id" field.
func (cuo *CreatorUpdateOne) SetCreatorID(s string) *CreatorUpdateOne {
	cuo.mutation.SetCreatorID(s)
	return cuo
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (cuo *CreatorUpdateOne) SetNillableCreatorID(s *string) *CreatorUpdateOne {
	if s != nil {
		cuo.SetCreatorID(*s)
	}
	return cuo
}

// SetCreatorOecuid sets the "creator_oecuid" field.
func (cuo *CreatorUpdateOne) SetCreatorOecuid(s string) *CreatorUpdateOne {
	cuo.mutation.SetCreatorOecuid(s)
	return cuo
}

// SetNillableCreatorOecuid sets the "creator_oecuid" field if the given value is not nil.
func (cuo *CreatorUpdateOne) SetNillableCreatorOecuid(s *string) *CreatorUpdateOne {
	if s != nil {
		cuo.SetCreatorOecuid(*s)
	}
	return cuo
}

// SetCate1NameCn sets the "cate1_name_cn" field.
func (cuo *CreatorUpdateOne) SetCate1NameCn(s []string) *CreatorUpdateOne {
	cuo.mutation.SetCate1NameCn(s)
	return cuo
}

// AppendCate1NameCn appends s to the "cate1_name_cn" field.
func (cuo *CreatorUpdateOne) AppendCate1NameCn(s []string) *CreatorUpdateOne {
	cuo.mutation.AppendCate1NameCn(s)
	return cuo
}

// SetTiktokCategory sets the "tiktok_category" field.
func (cuo *CreatorUpdateOne) SetTiktokCategory(s []string) *CreatorUpdateOne {
	cuo.mutation.SetTiktokCategory(s)
	return cuo
}

// AppendTiktokCategory appends s to the "tiktok_category" field.
func (cuo *CreatorUpdateOne) AppendTiktokCategory(s []string) *CreatorUpdateOne {
	cuo.mutation.AppendTiktokCategory(s)
	return cuo
}

// SetEmail sets the "email" field.
func (cuo *CreatorUpdateOne) SetEmail(s string) *CreatorUpdateOne {
	cuo.mutation.SetEmail(s)
	return cuo
}

// SetWhatsapp sets the "whatsapp" field.
func (cuo *CreatorUpdateOne) SetWhatsapp(s string) *CreatorUpdateOne {
	cuo.mutation.SetWhatsapp(s)
	return cuo
}

// Mutation returns the CreatorMutation object of the builder.
func (cuo *CreatorUpdateOne) Mutation() *CreatorMutation {
	return cuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CreatorUpdateOne) Select(field string, fields ...string) *CreatorUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Creator entity.
func (cuo *CreatorUpdateOne) Save(ctx context.Context) (*Creator, error) {
	var (
		err  error
		node *Creator
	)
	cuo.defaults()
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CreatorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Creator)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CreatorMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CreatorUpdateOne) SaveX(ctx context.Context) *Creator {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CreatorUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CreatorUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CreatorUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdateTime(); !ok {
		v := creator.UpdateDefaultUpdateTime()
		cuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CreatorUpdateOne) check() error {
	if v, ok := cuo.mutation.Xzid(); ok {
		if err := creator.XzidValidator(v); err != nil {
			return &ValidationError{Name: "xzid", err: fmt.Errorf(`ent: validator failed for field "Creator.xzid": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.UniqueID(); ok {
		if err := creator.UniqueIDValidator(v); err != nil {
			return &ValidationError{Name: "unique_id", err: fmt.Errorf(`ent: validator failed for field "Creator.unique_id": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.NickName(); ok {
		if err := creator.NickNameValidator(v); err != nil {
			return &ValidationError{Name: "nick_name", err: fmt.Errorf(`ent: validator failed for field "Creator.nick_name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Region(); ok {
		if err := creator.RegionValidator(v); err != nil {
			return &ValidationError{Name: "region", err: fmt.Errorf(`ent: validator failed for field "Creator.region": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.CreatorID(); ok {
		if err := creator.CreatorIDValidator(v); err != nil {
			return &ValidationError{Name: "creator_id", err: fmt.Errorf(`ent: validator failed for field "Creator.creator_id": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.CreatorOecuid(); ok {
		if err := creator.CreatorOecuidValidator(v); err != nil {
			return &ValidationError{Name: "creator_oecuid", err: fmt.Errorf(`ent: validator failed for field "Creator.creator_oecuid": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Email(); ok {
		if err := creator.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Creator.email": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Whatsapp(); ok {
		if err := creator.WhatsappValidator(v); err != nil {
			return &ValidationError{Name: "whatsapp", err: fmt.Errorf(`ent: validator failed for field "Creator.whatsapp": %w`, err)}
		}
	}
	return nil
}

func (cuo *CreatorUpdateOne) sqlSave(ctx context.Context) (_node *Creator, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   creator.Table,
			Columns: creator.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: creator.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Creator.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, creator.FieldID)
		for _, f := range fields {
			if !creator.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != creator.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdateTime(); ok {
		_spec.SetField(creator.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Xzid(); ok {
		_spec.SetField(creator.FieldXzid, field.TypeString, value)
	}
	if value, ok := cuo.mutation.UniqueID(); ok {
		_spec.SetField(creator.FieldUniqueID, field.TypeString, value)
	}
	if value, ok := cuo.mutation.NickName(); ok {
		_spec.SetField(creator.FieldNickName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Region(); ok {
		_spec.SetField(creator.FieldRegion, field.TypeString, value)
	}
	if value, ok := cuo.mutation.FollowerNum(); ok {
		_spec.SetField(creator.FieldFollowerNum, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.AddedFollowerNum(); ok {
		_spec.AddField(creator.FieldFollowerNum, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.CreatorID(); ok {
		_spec.SetField(creator.FieldCreatorID, field.TypeString, value)
	}
	if value, ok := cuo.mutation.CreatorOecuid(); ok {
		_spec.SetField(creator.FieldCreatorOecuid, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Cate1NameCn(); ok {
		_spec.SetField(creator.FieldCate1NameCn, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedCate1NameCn(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, creator.FieldCate1NameCn, value)
		})
	}
	if value, ok := cuo.mutation.TiktokCategory(); ok {
		_spec.SetField(creator.FieldTiktokCategory, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedTiktokCategory(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, creator.FieldTiktokCategory, value)
		})
	}
	if value, ok := cuo.mutation.Email(); ok {
		_spec.SetField(creator.FieldEmail, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Whatsapp(); ok {
		_spec.SetField(creator.FieldWhatsapp, field.TypeString, value)
	}
	_node = &Creator{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{creator.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
