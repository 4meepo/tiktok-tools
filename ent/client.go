// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/4meepo/tiktok-tools/ent/migrate"

	"github.com/4meepo/tiktok-tools/ent/creator"
	"github.com/4meepo/tiktok-tools/ent/tiktokcreator"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Creator is the client for interacting with the Creator builders.
	Creator *CreatorClient
	// TiktokCreator is the client for interacting with the TiktokCreator builders.
	TiktokCreator *TiktokCreatorClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Creator = NewCreatorClient(c.config)
	c.TiktokCreator = NewTiktokCreatorClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Creator:       NewCreatorClient(cfg),
		TiktokCreator: NewTiktokCreatorClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Creator:       NewCreatorClient(cfg),
		TiktokCreator: NewTiktokCreatorClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Creator.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Creator.Use(hooks...)
	c.TiktokCreator.Use(hooks...)
}

// CreatorClient is a client for the Creator schema.
type CreatorClient struct {
	config
}

// NewCreatorClient returns a client for the Creator from the given config.
func NewCreatorClient(c config) *CreatorClient {
	return &CreatorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `creator.Hooks(f(g(h())))`.
func (c *CreatorClient) Use(hooks ...Hook) {
	c.hooks.Creator = append(c.hooks.Creator, hooks...)
}

// Create returns a builder for creating a Creator entity.
func (c *CreatorClient) Create() *CreatorCreate {
	mutation := newCreatorMutation(c.config, OpCreate)
	return &CreatorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Creator entities.
func (c *CreatorClient) CreateBulk(builders ...*CreatorCreate) *CreatorCreateBulk {
	return &CreatorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Creator.
func (c *CreatorClient) Update() *CreatorUpdate {
	mutation := newCreatorMutation(c.config, OpUpdate)
	return &CreatorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CreatorClient) UpdateOne(cr *Creator) *CreatorUpdateOne {
	mutation := newCreatorMutation(c.config, OpUpdateOne, withCreator(cr))
	return &CreatorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CreatorClient) UpdateOneID(id int) *CreatorUpdateOne {
	mutation := newCreatorMutation(c.config, OpUpdateOne, withCreatorID(id))
	return &CreatorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Creator.
func (c *CreatorClient) Delete() *CreatorDelete {
	mutation := newCreatorMutation(c.config, OpDelete)
	return &CreatorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CreatorClient) DeleteOne(cr *Creator) *CreatorDeleteOne {
	return c.DeleteOneID(cr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CreatorClient) DeleteOneID(id int) *CreatorDeleteOne {
	builder := c.Delete().Where(creator.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CreatorDeleteOne{builder}
}

// Query returns a query builder for Creator.
func (c *CreatorClient) Query() *CreatorQuery {
	return &CreatorQuery{
		config: c.config,
	}
}

// Get returns a Creator entity by its id.
func (c *CreatorClient) Get(ctx context.Context, id int) (*Creator, error) {
	return c.Query().Where(creator.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CreatorClient) GetX(ctx context.Context, id int) *Creator {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CreatorClient) Hooks() []Hook {
	return c.hooks.Creator
}

// TiktokCreatorClient is a client for the TiktokCreator schema.
type TiktokCreatorClient struct {
	config
}

// NewTiktokCreatorClient returns a client for the TiktokCreator from the given config.
func NewTiktokCreatorClient(c config) *TiktokCreatorClient {
	return &TiktokCreatorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tiktokcreator.Hooks(f(g(h())))`.
func (c *TiktokCreatorClient) Use(hooks ...Hook) {
	c.hooks.TiktokCreator = append(c.hooks.TiktokCreator, hooks...)
}

// Create returns a builder for creating a TiktokCreator entity.
func (c *TiktokCreatorClient) Create() *TiktokCreatorCreate {
	mutation := newTiktokCreatorMutation(c.config, OpCreate)
	return &TiktokCreatorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TiktokCreator entities.
func (c *TiktokCreatorClient) CreateBulk(builders ...*TiktokCreatorCreate) *TiktokCreatorCreateBulk {
	return &TiktokCreatorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TiktokCreator.
func (c *TiktokCreatorClient) Update() *TiktokCreatorUpdate {
	mutation := newTiktokCreatorMutation(c.config, OpUpdate)
	return &TiktokCreatorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TiktokCreatorClient) UpdateOne(tc *TiktokCreator) *TiktokCreatorUpdateOne {
	mutation := newTiktokCreatorMutation(c.config, OpUpdateOne, withTiktokCreator(tc))
	return &TiktokCreatorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TiktokCreatorClient) UpdateOneID(id int) *TiktokCreatorUpdateOne {
	mutation := newTiktokCreatorMutation(c.config, OpUpdateOne, withTiktokCreatorID(id))
	return &TiktokCreatorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TiktokCreator.
func (c *TiktokCreatorClient) Delete() *TiktokCreatorDelete {
	mutation := newTiktokCreatorMutation(c.config, OpDelete)
	return &TiktokCreatorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TiktokCreatorClient) DeleteOne(tc *TiktokCreator) *TiktokCreatorDeleteOne {
	return c.DeleteOneID(tc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TiktokCreatorClient) DeleteOneID(id int) *TiktokCreatorDeleteOne {
	builder := c.Delete().Where(tiktokcreator.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TiktokCreatorDeleteOne{builder}
}

// Query returns a query builder for TiktokCreator.
func (c *TiktokCreatorClient) Query() *TiktokCreatorQuery {
	return &TiktokCreatorQuery{
		config: c.config,
	}
}

// Get returns a TiktokCreator entity by its id.
func (c *TiktokCreatorClient) Get(ctx context.Context, id int) (*TiktokCreator, error) {
	return c.Query().Where(tiktokcreator.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TiktokCreatorClient) GetX(ctx context.Context, id int) *TiktokCreator {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TiktokCreatorClient) Hooks() []Hook {
	return c.hooks.TiktokCreator
}
