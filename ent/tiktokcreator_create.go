// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/4meepo/tiktok-tools/ent/tiktokcreator"
)

// TiktokCreatorCreate is the builder for creating a TiktokCreator entity.
type TiktokCreatorCreate struct {
	config
	mutation *TiktokCreatorMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (tcc *TiktokCreatorCreate) SetCreateTime(t time.Time) *TiktokCreatorCreate {
	tcc.mutation.SetCreateTime(t)
	return tcc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (tcc *TiktokCreatorCreate) SetNillableCreateTime(t *time.Time) *TiktokCreatorCreate {
	if t != nil {
		tcc.SetCreateTime(*t)
	}
	return tcc
}

// SetUpdateTime sets the "update_time" field.
func (tcc *TiktokCreatorCreate) SetUpdateTime(t time.Time) *TiktokCreatorCreate {
	tcc.mutation.SetUpdateTime(t)
	return tcc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (tcc *TiktokCreatorCreate) SetNillableUpdateTime(t *time.Time) *TiktokCreatorCreate {
	if t != nil {
		tcc.SetUpdateTime(*t)
	}
	return tcc
}

// SetCreatorID sets the "creator_id" field.
func (tcc *TiktokCreatorCreate) SetCreatorID(s string) *TiktokCreatorCreate {
	tcc.mutation.SetCreatorID(s)
	return tcc
}

// SetCreatorName sets the "creator_name" field.
func (tcc *TiktokCreatorCreate) SetCreatorName(s string) *TiktokCreatorCreate {
	tcc.mutation.SetCreatorName(s)
	return tcc
}

// SetCreatorNickname sets the "creator_nickname" field.
func (tcc *TiktokCreatorCreate) SetCreatorNickname(s string) *TiktokCreatorCreate {
	tcc.mutation.SetCreatorNickname(s)
	return tcc
}

// SetRegion sets the "region" field.
func (tcc *TiktokCreatorCreate) SetRegion(s string) *TiktokCreatorCreate {
	tcc.mutation.SetRegion(s)
	return tcc
}

// SetProductCategories sets the "product_categories" field.
func (tcc *TiktokCreatorCreate) SetProductCategories(s []string) *TiktokCreatorCreate {
	tcc.mutation.SetProductCategories(s)
	return tcc
}

// SetFollowerCount sets the "follower_count" field.
func (tcc *TiktokCreatorCreate) SetFollowerCount(u uint32) *TiktokCreatorCreate {
	tcc.mutation.SetFollowerCount(u)
	return tcc
}

// SetNillableFollowerCount sets the "follower_count" field if the given value is not nil.
func (tcc *TiktokCreatorCreate) SetNillableFollowerCount(u *uint32) *TiktokCreatorCreate {
	if u != nil {
		tcc.SetFollowerCount(*u)
	}
	return tcc
}

// SetVideoAvgViewCnt sets the "video_avg_view_cnt" field.
func (tcc *TiktokCreatorCreate) SetVideoAvgViewCnt(u uint32) *TiktokCreatorCreate {
	tcc.mutation.SetVideoAvgViewCnt(u)
	return tcc
}

// SetNillableVideoAvgViewCnt sets the "video_avg_view_cnt" field if the given value is not nil.
func (tcc *TiktokCreatorCreate) SetNillableVideoAvgViewCnt(u *uint32) *TiktokCreatorCreate {
	if u != nil {
		tcc.SetVideoAvgViewCnt(*u)
	}
	return tcc
}

// SetVideoPubCnt sets the "video_pub_cnt" field.
func (tcc *TiktokCreatorCreate) SetVideoPubCnt(u uint32) *TiktokCreatorCreate {
	tcc.mutation.SetVideoPubCnt(u)
	return tcc
}

// SetNillableVideoPubCnt sets the "video_pub_cnt" field if the given value is not nil.
func (tcc *TiktokCreatorCreate) SetNillableVideoPubCnt(u *uint32) *TiktokCreatorCreate {
	if u != nil {
		tcc.SetVideoPubCnt(*u)
	}
	return tcc
}

// SetEcVideoAvgViewCnt sets the "ec_video_avg_view_cnt" field.
func (tcc *TiktokCreatorCreate) SetEcVideoAvgViewCnt(u uint32) *TiktokCreatorCreate {
	tcc.mutation.SetEcVideoAvgViewCnt(u)
	return tcc
}

// SetNillableEcVideoAvgViewCnt sets the "ec_video_avg_view_cnt" field if the given value is not nil.
func (tcc *TiktokCreatorCreate) SetNillableEcVideoAvgViewCnt(u *uint32) *TiktokCreatorCreate {
	if u != nil {
		tcc.SetEcVideoAvgViewCnt(*u)
	}
	return tcc
}

// SetCreatorOecuid sets the "creator_oecuid" field.
func (tcc *TiktokCreatorCreate) SetCreatorOecuid(s string) *TiktokCreatorCreate {
	tcc.mutation.SetCreatorOecuid(s)
	return tcc
}

// SetNillableCreatorOecuid sets the "creator_oecuid" field if the given value is not nil.
func (tcc *TiktokCreatorCreate) SetNillableCreatorOecuid(s *string) *TiktokCreatorCreate {
	if s != nil {
		tcc.SetCreatorOecuid(*s)
	}
	return tcc
}

// SetCreatorTtuid sets the "creator_ttuid" field.
func (tcc *TiktokCreatorCreate) SetCreatorTtuid(s string) *TiktokCreatorCreate {
	tcc.mutation.SetCreatorTtuid(s)
	return tcc
}

// SetNillableCreatorTtuid sets the "creator_ttuid" field if the given value is not nil.
func (tcc *TiktokCreatorCreate) SetNillableCreatorTtuid(s *string) *TiktokCreatorCreate {
	if s != nil {
		tcc.SetCreatorTtuid(*s)
	}
	return tcc
}

// Mutation returns the TiktokCreatorMutation object of the builder.
func (tcc *TiktokCreatorCreate) Mutation() *TiktokCreatorMutation {
	return tcc.mutation
}

// Save creates the TiktokCreator in the database.
func (tcc *TiktokCreatorCreate) Save(ctx context.Context) (*TiktokCreator, error) {
	var (
		err  error
		node *TiktokCreator
	)
	tcc.defaults()
	if len(tcc.hooks) == 0 {
		if err = tcc.check(); err != nil {
			return nil, err
		}
		node, err = tcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TiktokCreatorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tcc.check(); err != nil {
				return nil, err
			}
			tcc.mutation = mutation
			if node, err = tcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tcc.hooks) - 1; i >= 0; i-- {
			if tcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tcc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tcc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TiktokCreator)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TiktokCreatorMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tcc *TiktokCreatorCreate) SaveX(ctx context.Context) *TiktokCreator {
	v, err := tcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcc *TiktokCreatorCreate) Exec(ctx context.Context) error {
	_, err := tcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcc *TiktokCreatorCreate) ExecX(ctx context.Context) {
	if err := tcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcc *TiktokCreatorCreate) defaults() {
	if _, ok := tcc.mutation.CreateTime(); !ok {
		v := tiktokcreator.DefaultCreateTime()
		tcc.mutation.SetCreateTime(v)
	}
	if _, ok := tcc.mutation.UpdateTime(); !ok {
		v := tiktokcreator.DefaultUpdateTime()
		tcc.mutation.SetUpdateTime(v)
	}
	if _, ok := tcc.mutation.ProductCategories(); !ok {
		v := tiktokcreator.DefaultProductCategories
		tcc.mutation.SetProductCategories(v)
	}
	if _, ok := tcc.mutation.FollowerCount(); !ok {
		v := tiktokcreator.DefaultFollowerCount
		tcc.mutation.SetFollowerCount(v)
	}
	if _, ok := tcc.mutation.VideoAvgViewCnt(); !ok {
		v := tiktokcreator.DefaultVideoAvgViewCnt
		tcc.mutation.SetVideoAvgViewCnt(v)
	}
	if _, ok := tcc.mutation.VideoPubCnt(); !ok {
		v := tiktokcreator.DefaultVideoPubCnt
		tcc.mutation.SetVideoPubCnt(v)
	}
	if _, ok := tcc.mutation.EcVideoAvgViewCnt(); !ok {
		v := tiktokcreator.DefaultEcVideoAvgViewCnt
		tcc.mutation.SetEcVideoAvgViewCnt(v)
	}
	if _, ok := tcc.mutation.CreatorOecuid(); !ok {
		v := tiktokcreator.DefaultCreatorOecuid
		tcc.mutation.SetCreatorOecuid(v)
	}
	if _, ok := tcc.mutation.CreatorTtuid(); !ok {
		v := tiktokcreator.DefaultCreatorTtuid
		tcc.mutation.SetCreatorTtuid(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcc *TiktokCreatorCreate) check() error {
	if _, ok := tcc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "TiktokCreator.create_time"`)}
	}
	if _, ok := tcc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "TiktokCreator.update_time"`)}
	}
	if _, ok := tcc.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator_id", err: errors.New(`ent: missing required field "TiktokCreator.creator_id"`)}
	}
	if v, ok := tcc.mutation.CreatorID(); ok {
		if err := tiktokcreator.CreatorIDValidator(v); err != nil {
			return &ValidationError{Name: "creator_id", err: fmt.Errorf(`ent: validator failed for field "TiktokCreator.creator_id": %w`, err)}
		}
	}
	if _, ok := tcc.mutation.CreatorName(); !ok {
		return &ValidationError{Name: "creator_name", err: errors.New(`ent: missing required field "TiktokCreator.creator_name"`)}
	}
	if v, ok := tcc.mutation.CreatorName(); ok {
		if err := tiktokcreator.CreatorNameValidator(v); err != nil {
			return &ValidationError{Name: "creator_name", err: fmt.Errorf(`ent: validator failed for field "TiktokCreator.creator_name": %w`, err)}
		}
	}
	if _, ok := tcc.mutation.CreatorNickname(); !ok {
		return &ValidationError{Name: "creator_nickname", err: errors.New(`ent: missing required field "TiktokCreator.creator_nickname"`)}
	}
	if v, ok := tcc.mutation.CreatorNickname(); ok {
		if err := tiktokcreator.CreatorNicknameValidator(v); err != nil {
			return &ValidationError{Name: "creator_nickname", err: fmt.Errorf(`ent: validator failed for field "TiktokCreator.creator_nickname": %w`, err)}
		}
	}
	if _, ok := tcc.mutation.Region(); !ok {
		return &ValidationError{Name: "region", err: errors.New(`ent: missing required field "TiktokCreator.region"`)}
	}
	if v, ok := tcc.mutation.Region(); ok {
		if err := tiktokcreator.RegionValidator(v); err != nil {
			return &ValidationError{Name: "region", err: fmt.Errorf(`ent: validator failed for field "TiktokCreator.region": %w`, err)}
		}
	}
	if _, ok := tcc.mutation.ProductCategories(); !ok {
		return &ValidationError{Name: "product_categories", err: errors.New(`ent: missing required field "TiktokCreator.product_categories"`)}
	}
	if _, ok := tcc.mutation.FollowerCount(); !ok {
		return &ValidationError{Name: "follower_count", err: errors.New(`ent: missing required field "TiktokCreator.follower_count"`)}
	}
	if _, ok := tcc.mutation.VideoAvgViewCnt(); !ok {
		return &ValidationError{Name: "video_avg_view_cnt", err: errors.New(`ent: missing required field "TiktokCreator.video_avg_view_cnt"`)}
	}
	if _, ok := tcc.mutation.VideoPubCnt(); !ok {
		return &ValidationError{Name: "video_pub_cnt", err: errors.New(`ent: missing required field "TiktokCreator.video_pub_cnt"`)}
	}
	if _, ok := tcc.mutation.EcVideoAvgViewCnt(); !ok {
		return &ValidationError{Name: "ec_video_avg_view_cnt", err: errors.New(`ent: missing required field "TiktokCreator.ec_video_avg_view_cnt"`)}
	}
	if _, ok := tcc.mutation.CreatorOecuid(); !ok {
		return &ValidationError{Name: "creator_oecuid", err: errors.New(`ent: missing required field "TiktokCreator.creator_oecuid"`)}
	}
	if _, ok := tcc.mutation.CreatorTtuid(); !ok {
		return &ValidationError{Name: "creator_ttuid", err: errors.New(`ent: missing required field "TiktokCreator.creator_ttuid"`)}
	}
	return nil
}

func (tcc *TiktokCreatorCreate) sqlSave(ctx context.Context) (*TiktokCreator, error) {
	_node, _spec := tcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tcc *TiktokCreatorCreate) createSpec() (*TiktokCreator, *sqlgraph.CreateSpec) {
	var (
		_node = &TiktokCreator{config: tcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tiktokcreator.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tiktokcreator.FieldID,
			},
		}
	)
	if value, ok := tcc.mutation.CreateTime(); ok {
		_spec.SetField(tiktokcreator.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := tcc.mutation.UpdateTime(); ok {
		_spec.SetField(tiktokcreator.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := tcc.mutation.CreatorID(); ok {
		_spec.SetField(tiktokcreator.FieldCreatorID, field.TypeString, value)
		_node.CreatorID = value
	}
	if value, ok := tcc.mutation.CreatorName(); ok {
		_spec.SetField(tiktokcreator.FieldCreatorName, field.TypeString, value)
		_node.CreatorName = value
	}
	if value, ok := tcc.mutation.CreatorNickname(); ok {
		_spec.SetField(tiktokcreator.FieldCreatorNickname, field.TypeString, value)
		_node.CreatorNickname = value
	}
	if value, ok := tcc.mutation.Region(); ok {
		_spec.SetField(tiktokcreator.FieldRegion, field.TypeString, value)
		_node.Region = value
	}
	if value, ok := tcc.mutation.ProductCategories(); ok {
		_spec.SetField(tiktokcreator.FieldProductCategories, field.TypeJSON, value)
		_node.ProductCategories = value
	}
	if value, ok := tcc.mutation.FollowerCount(); ok {
		_spec.SetField(tiktokcreator.FieldFollowerCount, field.TypeUint32, value)
		_node.FollowerCount = value
	}
	if value, ok := tcc.mutation.VideoAvgViewCnt(); ok {
		_spec.SetField(tiktokcreator.FieldVideoAvgViewCnt, field.TypeUint32, value)
		_node.VideoAvgViewCnt = value
	}
	if value, ok := tcc.mutation.VideoPubCnt(); ok {
		_spec.SetField(tiktokcreator.FieldVideoPubCnt, field.TypeUint32, value)
		_node.VideoPubCnt = value
	}
	if value, ok := tcc.mutation.EcVideoAvgViewCnt(); ok {
		_spec.SetField(tiktokcreator.FieldEcVideoAvgViewCnt, field.TypeUint32, value)
		_node.EcVideoAvgViewCnt = value
	}
	if value, ok := tcc.mutation.CreatorOecuid(); ok {
		_spec.SetField(tiktokcreator.FieldCreatorOecuid, field.TypeString, value)
		_node.CreatorOecuid = value
	}
	if value, ok := tcc.mutation.CreatorTtuid(); ok {
		_spec.SetField(tiktokcreator.FieldCreatorTtuid, field.TypeString, value)
		_node.CreatorTtuid = value
	}
	return _node, _spec
}

// TiktokCreatorCreateBulk is the builder for creating many TiktokCreator entities in bulk.
type TiktokCreatorCreateBulk struct {
	config
	builders []*TiktokCreatorCreate
}

// Save creates the TiktokCreator entities in the database.
func (tccb *TiktokCreatorCreateBulk) Save(ctx context.Context) ([]*TiktokCreator, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tccb.builders))
	nodes := make([]*TiktokCreator, len(tccb.builders))
	mutators := make([]Mutator, len(tccb.builders))
	for i := range tccb.builders {
		func(i int, root context.Context) {
			builder := tccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TiktokCreatorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tccb *TiktokCreatorCreateBulk) SaveX(ctx context.Context) []*TiktokCreator {
	v, err := tccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tccb *TiktokCreatorCreateBulk) Exec(ctx context.Context) error {
	_, err := tccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tccb *TiktokCreatorCreateBulk) ExecX(ctx context.Context) {
	if err := tccb.Exec(ctx); err != nil {
		panic(err)
	}
}
