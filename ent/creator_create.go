// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/4meepo/tiktok-tools/ent/creator"
)

// CreatorCreate is the builder for creating a Creator entity.
type CreatorCreate struct {
	config
	mutation *CreatorMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (cc *CreatorCreate) SetCreateTime(t time.Time) *CreatorCreate {
	cc.mutation.SetCreateTime(t)
	return cc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cc *CreatorCreate) SetNillableCreateTime(t *time.Time) *CreatorCreate {
	if t != nil {
		cc.SetCreateTime(*t)
	}
	return cc
}

// SetUpdateTime sets the "update_time" field.
func (cc *CreatorCreate) SetUpdateTime(t time.Time) *CreatorCreate {
	cc.mutation.SetUpdateTime(t)
	return cc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (cc *CreatorCreate) SetNillableUpdateTime(t *time.Time) *CreatorCreate {
	if t != nil {
		cc.SetUpdateTime(*t)
	}
	return cc
}

// SetXzid sets the "xzid" field.
func (cc *CreatorCreate) SetXzid(s string) *CreatorCreate {
	cc.mutation.SetXzid(s)
	return cc
}

// SetUniqueID sets the "unique_id" field.
func (cc *CreatorCreate) SetUniqueID(s string) *CreatorCreate {
	cc.mutation.SetUniqueID(s)
	return cc
}

// SetNickName sets the "nick_name" field.
func (cc *CreatorCreate) SetNickName(s string) *CreatorCreate {
	cc.mutation.SetNickName(s)
	return cc
}

// SetRegion sets the "region" field.
func (cc *CreatorCreate) SetRegion(s string) *CreatorCreate {
	cc.mutation.SetRegion(s)
	return cc
}

// SetFollowerNum sets the "follower_num" field.
func (cc *CreatorCreate) SetFollowerNum(u uint32) *CreatorCreate {
	cc.mutation.SetFollowerNum(u)
	return cc
}

// SetCreatorID sets the "creator_id" field.
func (cc *CreatorCreate) SetCreatorID(s string) *CreatorCreate {
	cc.mutation.SetCreatorID(s)
	return cc
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (cc *CreatorCreate) SetNillableCreatorID(s *string) *CreatorCreate {
	if s != nil {
		cc.SetCreatorID(*s)
	}
	return cc
}

// SetCreatorOecuid sets the "creator_oecuid" field.
func (cc *CreatorCreate) SetCreatorOecuid(s string) *CreatorCreate {
	cc.mutation.SetCreatorOecuid(s)
	return cc
}

// SetNillableCreatorOecuid sets the "creator_oecuid" field if the given value is not nil.
func (cc *CreatorCreate) SetNillableCreatorOecuid(s *string) *CreatorCreate {
	if s != nil {
		cc.SetCreatorOecuid(*s)
	}
	return cc
}

// SetCate1NameCn sets the "cate1_name_cn" field.
func (cc *CreatorCreate) SetCate1NameCn(s []string) *CreatorCreate {
	cc.mutation.SetCate1NameCn(s)
	return cc
}

// SetTiktokCategory sets the "tiktok_category" field.
func (cc *CreatorCreate) SetTiktokCategory(s []string) *CreatorCreate {
	cc.mutation.SetTiktokCategory(s)
	return cc
}

// SetEmail sets the "email" field.
func (cc *CreatorCreate) SetEmail(s string) *CreatorCreate {
	cc.mutation.SetEmail(s)
	return cc
}

// SetWhatsapp sets the "whatsapp" field.
func (cc *CreatorCreate) SetWhatsapp(s string) *CreatorCreate {
	cc.mutation.SetWhatsapp(s)
	return cc
}

// Mutation returns the CreatorMutation object of the builder.
func (cc *CreatorCreate) Mutation() *CreatorMutation {
	return cc.mutation
}

// Save creates the Creator in the database.
func (cc *CreatorCreate) Save(ctx context.Context) (*Creator, error) {
	var (
		err  error
		node *Creator
	)
	cc.defaults()
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CreatorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			if node, err = cc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			if cc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Creator)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CreatorMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CreatorCreate) SaveX(ctx context.Context) *Creator {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CreatorCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CreatorCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CreatorCreate) defaults() {
	if _, ok := cc.mutation.CreateTime(); !ok {
		v := creator.DefaultCreateTime()
		cc.mutation.SetCreateTime(v)
	}
	if _, ok := cc.mutation.UpdateTime(); !ok {
		v := creator.DefaultUpdateTime()
		cc.mutation.SetUpdateTime(v)
	}
	if _, ok := cc.mutation.CreatorID(); !ok {
		v := creator.DefaultCreatorID
		cc.mutation.SetCreatorID(v)
	}
	if _, ok := cc.mutation.CreatorOecuid(); !ok {
		v := creator.DefaultCreatorOecuid
		cc.mutation.SetCreatorOecuid(v)
	}
	if _, ok := cc.mutation.Cate1NameCn(); !ok {
		v := creator.DefaultCate1NameCn
		cc.mutation.SetCate1NameCn(v)
	}
	if _, ok := cc.mutation.TiktokCategory(); !ok {
		v := creator.DefaultTiktokCategory
		cc.mutation.SetTiktokCategory(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CreatorCreate) check() error {
	if _, ok := cc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Creator.create_time"`)}
	}
	if _, ok := cc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Creator.update_time"`)}
	}
	if _, ok := cc.mutation.Xzid(); !ok {
		return &ValidationError{Name: "xzid", err: errors.New(`ent: missing required field "Creator.xzid"`)}
	}
	if v, ok := cc.mutation.Xzid(); ok {
		if err := creator.XzidValidator(v); err != nil {
			return &ValidationError{Name: "xzid", err: fmt.Errorf(`ent: validator failed for field "Creator.xzid": %w`, err)}
		}
	}
	if _, ok := cc.mutation.UniqueID(); !ok {
		return &ValidationError{Name: "unique_id", err: errors.New(`ent: missing required field "Creator.unique_id"`)}
	}
	if v, ok := cc.mutation.UniqueID(); ok {
		if err := creator.UniqueIDValidator(v); err != nil {
			return &ValidationError{Name: "unique_id", err: fmt.Errorf(`ent: validator failed for field "Creator.unique_id": %w`, err)}
		}
	}
	if _, ok := cc.mutation.NickName(); !ok {
		return &ValidationError{Name: "nick_name", err: errors.New(`ent: missing required field "Creator.nick_name"`)}
	}
	if v, ok := cc.mutation.NickName(); ok {
		if err := creator.NickNameValidator(v); err != nil {
			return &ValidationError{Name: "nick_name", err: fmt.Errorf(`ent: validator failed for field "Creator.nick_name": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Region(); !ok {
		return &ValidationError{Name: "region", err: errors.New(`ent: missing required field "Creator.region"`)}
	}
	if v, ok := cc.mutation.Region(); ok {
		if err := creator.RegionValidator(v); err != nil {
			return &ValidationError{Name: "region", err: fmt.Errorf(`ent: validator failed for field "Creator.region": %w`, err)}
		}
	}
	if _, ok := cc.mutation.FollowerNum(); !ok {
		return &ValidationError{Name: "follower_num", err: errors.New(`ent: missing required field "Creator.follower_num"`)}
	}
	if _, ok := cc.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator_id", err: errors.New(`ent: missing required field "Creator.creator_id"`)}
	}
	if v, ok := cc.mutation.CreatorID(); ok {
		if err := creator.CreatorIDValidator(v); err != nil {
			return &ValidationError{Name: "creator_id", err: fmt.Errorf(`ent: validator failed for field "Creator.creator_id": %w`, err)}
		}
	}
	if _, ok := cc.mutation.CreatorOecuid(); !ok {
		return &ValidationError{Name: "creator_oecuid", err: errors.New(`ent: missing required field "Creator.creator_oecuid"`)}
	}
	if v, ok := cc.mutation.CreatorOecuid(); ok {
		if err := creator.CreatorOecuidValidator(v); err != nil {
			return &ValidationError{Name: "creator_oecuid", err: fmt.Errorf(`ent: validator failed for field "Creator.creator_oecuid": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Cate1NameCn(); !ok {
		return &ValidationError{Name: "cate1_name_cn", err: errors.New(`ent: missing required field "Creator.cate1_name_cn"`)}
	}
	if _, ok := cc.mutation.TiktokCategory(); !ok {
		return &ValidationError{Name: "tiktok_category", err: errors.New(`ent: missing required field "Creator.tiktok_category"`)}
	}
	if _, ok := cc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "Creator.email"`)}
	}
	if v, ok := cc.mutation.Email(); ok {
		if err := creator.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Creator.email": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Whatsapp(); !ok {
		return &ValidationError{Name: "whatsapp", err: errors.New(`ent: missing required field "Creator.whatsapp"`)}
	}
	if v, ok := cc.mutation.Whatsapp(); ok {
		if err := creator.WhatsappValidator(v); err != nil {
			return &ValidationError{Name: "whatsapp", err: fmt.Errorf(`ent: validator failed for field "Creator.whatsapp": %w`, err)}
		}
	}
	return nil
}

func (cc *CreatorCreate) sqlSave(ctx context.Context) (*Creator, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cc *CreatorCreate) createSpec() (*Creator, *sqlgraph.CreateSpec) {
	var (
		_node = &Creator{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: creator.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: creator.FieldID,
			},
		}
	)
	if value, ok := cc.mutation.CreateTime(); ok {
		_spec.SetField(creator.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := cc.mutation.UpdateTime(); ok {
		_spec.SetField(creator.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := cc.mutation.Xzid(); ok {
		_spec.SetField(creator.FieldXzid, field.TypeString, value)
		_node.Xzid = value
	}
	if value, ok := cc.mutation.UniqueID(); ok {
		_spec.SetField(creator.FieldUniqueID, field.TypeString, value)
		_node.UniqueID = value
	}
	if value, ok := cc.mutation.NickName(); ok {
		_spec.SetField(creator.FieldNickName, field.TypeString, value)
		_node.NickName = value
	}
	if value, ok := cc.mutation.Region(); ok {
		_spec.SetField(creator.FieldRegion, field.TypeString, value)
		_node.Region = value
	}
	if value, ok := cc.mutation.FollowerNum(); ok {
		_spec.SetField(creator.FieldFollowerNum, field.TypeUint32, value)
		_node.FollowerNum = value
	}
	if value, ok := cc.mutation.CreatorID(); ok {
		_spec.SetField(creator.FieldCreatorID, field.TypeString, value)
		_node.CreatorID = value
	}
	if value, ok := cc.mutation.CreatorOecuid(); ok {
		_spec.SetField(creator.FieldCreatorOecuid, field.TypeString, value)
		_node.CreatorOecuid = value
	}
	if value, ok := cc.mutation.Cate1NameCn(); ok {
		_spec.SetField(creator.FieldCate1NameCn, field.TypeJSON, value)
		_node.Cate1NameCn = value
	}
	if value, ok := cc.mutation.TiktokCategory(); ok {
		_spec.SetField(creator.FieldTiktokCategory, field.TypeJSON, value)
		_node.TiktokCategory = value
	}
	if value, ok := cc.mutation.Email(); ok {
		_spec.SetField(creator.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := cc.mutation.Whatsapp(); ok {
		_spec.SetField(creator.FieldWhatsapp, field.TypeString, value)
		_node.Whatsapp = value
	}
	return _node, _spec
}

// CreatorCreateBulk is the builder for creating many Creator entities in bulk.
type CreatorCreateBulk struct {
	config
	builders []*CreatorCreate
}

// Save creates the Creator entities in the database.
func (ccb *CreatorCreateBulk) Save(ctx context.Context) ([]*Creator, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Creator, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CreatorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CreatorCreateBulk) SaveX(ctx context.Context) []*Creator {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CreatorCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CreatorCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
